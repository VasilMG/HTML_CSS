Box Model:

// for centering the content / text in body or container: 
** margin 0 auto
it is put in the body or container css with some padding

** important for margins: 
if two adjecent elements have padding/bottom/top - the 2 margins are NOT summed
css takes the greater value from both margins

while with padding the values are summed and it both elemts have padding it will be 
sum of padding_el1 + padding_el2
padding-block - means padding top and bottom

to select and a wich href starts with https:google
body a[href^="https://google.com"]

for highlighting text or change colour when it is a targeted h1 , h2 etc 
h1:target -- colour , background ...
opacity: 0.1 or 0.2 ...0.7 --- means prozrachnost

for positioning of elements:
** position: static, relative, absolute
default static
** relative - can use top, left, right, left as a coordinate system and move the element 
in the body where it is.
** absolute - outs the element from the body and can be moved everywhere with coordinates
***if there is a element with position relative - it will move according to that element 

for transparency of colours: 
rgba (0. 0 , 0, 0.1 or 0.2 or 0.3) 

// for variables in css
the variables are written in the html or :root css
html (or :root) {
    --some-variable: 1.5em;
}

to select a child / last :first etc: 
blockquote p:last-child 

after that we can use it with var(--some-variable, 1.5em)
the comma 1.5em after the variable means that if the css does not find the variable
it will use the value 1.5em.
** also we can allign or set whitespace depending on the variable on other elements if needed
calc(0.5 * var(--some-variable, 1.5em))


dl - definition list - like ul and ol but for descriptions and can have a title 
for every row
dt - definition title
dd - definition description

// Alternative Box sizing

html {
    box-sixing: border-box;
}
and then inherit the property to all the elements
*, *::before, *::after{
    box-sizing: inherit;
}

Standard CSS box model:

.box {
    width: 350px;
    height: 150px;
    margin: 10px;
    padding: 25px:
    border: 5px solid black;
}
actual size taken - height: 210px widht: 410px

// to calculate sizes with both em and px
** width calc(300px - 2em)

// css variable 
--padding: 2em 
after that used with --> var( --padding )

see 'pre' and 'code' tags -- what are they for